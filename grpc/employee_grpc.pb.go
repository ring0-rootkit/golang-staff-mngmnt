// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: grpc/employee.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmployeeControllerClient is the client API for EmployeeController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmployeeControllerClient interface {
	StartWorkShift(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseCode, error)
	EndWorkShift(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseCode, error)
	GetWorkedHours(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*HoursWorked, error)
	GetSalaryPerHour(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*SalaryPH, error)
}

type employeeControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEmployeeControllerClient(cc grpc.ClientConnInterface) EmployeeControllerClient {
	return &employeeControllerClient{cc}
}

func (c *employeeControllerClient) StartWorkShift(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseCode, error) {
	out := new(ResponseCode)
	err := c.cc.Invoke(ctx, "/EmployeeController/StartWorkShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeControllerClient) EndWorkShift(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*ResponseCode, error) {
	out := new(ResponseCode)
	err := c.cc.Invoke(ctx, "/EmployeeController/EndWorkShift", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeControllerClient) GetWorkedHours(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*HoursWorked, error) {
	out := new(HoursWorked)
	err := c.cc.Invoke(ctx, "/EmployeeController/GetWorkedHours", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeControllerClient) GetSalaryPerHour(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*SalaryPH, error) {
	out := new(SalaryPH)
	err := c.cc.Invoke(ctx, "/EmployeeController/GetSalaryPerHour", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmployeeControllerServer is the server API for EmployeeController service.
// All implementations must embed UnimplementedEmployeeControllerServer
// for forward compatibility
type EmployeeControllerServer interface {
	StartWorkShift(context.Context, *Employee) (*ResponseCode, error)
	EndWorkShift(context.Context, *Employee) (*ResponseCode, error)
	GetWorkedHours(context.Context, *Employee) (*HoursWorked, error)
	GetSalaryPerHour(context.Context, *Employee) (*SalaryPH, error)
	mustEmbedUnimplementedEmployeeControllerServer()
}

// UnimplementedEmployeeControllerServer must be embedded to have forward compatible implementations.
type UnimplementedEmployeeControllerServer struct {
}

func (UnimplementedEmployeeControllerServer) StartWorkShift(context.Context, *Employee) (*ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkShift not implemented")
}
func (UnimplementedEmployeeControllerServer) EndWorkShift(context.Context, *Employee) (*ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndWorkShift not implemented")
}
func (UnimplementedEmployeeControllerServer) GetWorkedHours(context.Context, *Employee) (*HoursWorked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkedHours not implemented")
}
func (UnimplementedEmployeeControllerServer) GetSalaryPerHour(context.Context, *Employee) (*SalaryPH, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalaryPerHour not implemented")
}
func (UnimplementedEmployeeControllerServer) mustEmbedUnimplementedEmployeeControllerServer() {}

// UnsafeEmployeeControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmployeeControllerServer will
// result in compilation errors.
type UnsafeEmployeeControllerServer interface {
	mustEmbedUnimplementedEmployeeControllerServer()
}

func RegisterEmployeeControllerServer(s grpc.ServiceRegistrar, srv EmployeeControllerServer) {
	s.RegisterService(&EmployeeController_ServiceDesc, srv)
}

func _EmployeeController_StartWorkShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeControllerServer).StartWorkShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeController/StartWorkShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeControllerServer).StartWorkShift(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeController_EndWorkShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeControllerServer).EndWorkShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeController/EndWorkShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeControllerServer).EndWorkShift(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeController_GetWorkedHours_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeControllerServer).GetWorkedHours(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeController/GetWorkedHours",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeControllerServer).GetWorkedHours(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeController_GetSalaryPerHour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeControllerServer).GetSalaryPerHour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EmployeeController/GetSalaryPerHour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeControllerServer).GetSalaryPerHour(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

// EmployeeController_ServiceDesc is the grpc.ServiceDesc for EmployeeController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmployeeController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmployeeController",
	HandlerType: (*EmployeeControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkShift",
			Handler:    _EmployeeController_StartWorkShift_Handler,
		},
		{
			MethodName: "EndWorkShift",
			Handler:    _EmployeeController_EndWorkShift_Handler,
		},
		{
			MethodName: "GetWorkedHours",
			Handler:    _EmployeeController_GetWorkedHours_Handler,
		},
		{
			MethodName: "GetSalaryPerHour",
			Handler:    _EmployeeController_GetSalaryPerHour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/employee.proto",
}
